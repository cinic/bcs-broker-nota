function hoverMarker(t){var e=markers[t],n=e.placemark;n.options.set("iconContentLayout",ymaps.templateLayoutFactory.createClass('<span class="marker active">'+t+"</span>")),$(".point[data-point="+t+"] .marker").addClass("hovered")}function blurMarker(t){var e=markers[t],n=e.placemark;e.active||n.options.set("iconContentLayout",ymaps.templateLayoutFactory.createClass('<span class="marker">'+t+"</span>")),$(".point[data-point="+t+"] .marker").removeClass("hovered")}function openRoute(){closeAllPointDetails(),$(".route").show(),bindTogglebox(),routing=!0}function closeRoute(){removeRoute(),$(".route").hide(),routing=!1}function clearRoutes(){$(".route .route-points input").val("")}function setRoutePoint(t,e,n){1==n?($("#pointA").val(e),$("#pointA-coord").val(t)):($("#pointB").val(e),$("#pointB-coord").val(t)),$("#pointA-coord").val().length&&$("#pointB-coord").val().length&&setRoute()}function removeRoute(){multiRoute&&contactMap.geoObjects.remove(multiRoute),multiRoute=!1}function setRoute(){removeRoute();var t=$("#routingMode").val(),e=$("#avoidTraffic").is(":checked"),n=$("#pointA-coord").val().length?$("#pointA-coord").val():$("#pointA").val(),i=$("#pointB-coord").val().length?$("#pointB-coord").val():$("#pointB").val();multiRoute=new ymaps.multiRouter.MultiRoute({referencePoints:[n,i],params:{routingMode:t,avoidTrafficJams:e}},{routeStrokeWidth:1,routeActiveStrokeWidth:4,routeStrokeColor:"#ffffff",routeActiveStrokeColor:"#122f5b",wayPointStartIconLayout:"default#image",wayPointStartIconImageHref:"/content/images/map-marker.png",wayPointStartContentSize:[10,10],wayPointStartIconImageSize:[27,36],wayPointStartIconImageOffset:[-13,-36],wayPointFinishIconLayout:"default#image",wayPointFinishIconImageHref:"/content/images/map-marker.png",wayPointFinishContentSize:[10,10],wayPointFinishIconImageSize:[27,36],wayPointFinishIconImageOffset:[-13,-36]}),contactMap.geoObjects.add(multiRoute)}function openPointDetails(t){if($(".point-detail[data-point="+t+"]").is(":visible"))return!1;removeRoute(),closeAllPointDetails(),closeRoute(),$(".point-detail[data-point="+t+"]").show();var e=markers[t];e.active=!0,markers[t]=e,hoverMarker(t)}function closePointDetails(t){$(".point-detail[data-point="+t+"]").hide();var e=markers[t];e.active=!1,markers[t]=e,blurMarker(t)}function closeAllPointDetails(){$(".point-detail:visible").each(function(){var t=parseInt($(this).attr("data-point"));closePointDetails(t)})}!function(t,e){"function"==typeof define&&define.amd?define("sifter",e):"object"==typeof exports?module.exports=e():t.Sifter=e()}(this,function(){var t=function(t,e){this.items=t,this.settings=e||{diacritics:!0}};t.prototype.tokenize=function(t){if(t=i(String(t||"").toLowerCase()),!t||!t.length)return[];var e,n,r,a,l=[],u=t.split(/ +/);for(e=0,n=u.length;n>e;e++){if(r=o(u[e]),this.settings.diacritics)for(a in s)s.hasOwnProperty(a)&&(r=r.replace(new RegExp(a,"g"),s[a]));l.push({string:u[e],regex:new RegExp(r,"i")})}return l},t.prototype.iterator=function(t,e){var n;n=r(t)?Array.prototype.forEach||function(t){for(var e=0,n=this.length;n>e;e++)t(this[e],e,this)}:function(t){for(var e in this)this.hasOwnProperty(e)&&t(this[e],e,this)},n.apply(t,[e])},t.prototype.getScoreFunction=function(t,e){var n,i,o,r;n=this,t=n.prepareSearch(t,e),o=t.tokens,i=t.options.fields,r=o.length;var s=function(t,e){var n,i;return t?(t=String(t||""),i=t.search(e.regex),-1===i?0:(n=e.string.length/t.length,0===i&&(n+=.5),n)):0},a=function(){var t=i.length;return t?1===t?function(t,e){return s(e[i[0]],t)}:function(e,n){for(var o=0,r=0;t>o;o++)r+=s(n[i[o]],e);return r/t}:function(){return 0}}();return r?1===r?function(t){return a(o[0],t)}:"and"===t.options.conjunction?function(t){for(var e,n=0,i=0;r>n;n++){if(e=a(o[n],t),0>=e)return 0;i+=e}return i/r}:function(t){for(var e=0,n=0;r>e;e++)n+=a(o[e],t);return n/r}:function(){return 0}},t.prototype.getSortFunction=function(t,n){var i,o,r,s,a,l,u,c,p,d,h;if(r=this,t=r.prepareSearch(t,n),h=!t.query&&n.sort_empty||n.sort,p=function(t,e){return"$score"===t?e.score:r.items[e.id][t]},a=[],h)for(i=0,o=h.length;o>i;i++)(t.query||"$score"!==h[i].field)&&a.push(h[i]);if(t.query){for(d=!0,i=0,o=a.length;o>i;i++)if("$score"===a[i].field){d=!1;break}d&&a.unshift({field:"$score",direction:"desc"})}else for(i=0,o=a.length;o>i;i++)if("$score"===a[i].field){a.splice(i,1);break}for(c=[],i=0,o=a.length;o>i;i++)c.push("desc"===a[i].direction?-1:1);return l=a.length,l?1===l?(s=a[0].field,u=c[0],function(t,n){return u*e(p(s,t),p(s,n))}):function(t,n){var i,o,r;for(i=0;l>i;i++)if(r=a[i].field,o=c[i]*e(p(r,t),p(r,n)))return o;return 0}:null},t.prototype.prepareSearch=function(t,e){if("object"==typeof t)return t;e=n({},e);var i=e.fields,o=e.sort,s=e.sort_empty;return i&&!r(i)&&(e.fields=[i]),o&&!r(o)&&(e.sort=[o]),s&&!r(s)&&(e.sort_empty=[s]),{options:e,query:String(t||"").toLowerCase(),tokens:this.tokenize(t),total:0,items:[]}},t.prototype.search=function(t,e){var n,i,o,r,s=this;return i=this.prepareSearch(t,e),e=i.options,t=i.query,r=e.score||s.getScoreFunction(i),t.length?s.iterator(s.items,function(t,o){n=r(t),(e.filter===!1||n>0)&&i.items.push({score:n,id:o})}):s.iterator(s.items,function(t,e){i.items.push({score:1,id:e})}),o=s.getSortFunction(i,e),o&&i.items.sort(o),i.total=i.items.length,"number"==typeof e.limit&&(i.items=i.items.slice(0,e.limit)),i};var e=function(t,e){return"number"==typeof t&&"number"==typeof e?t>e?1:e>t?-1:0:(t=a(String(t||"")),e=a(String(e||"")),t>e?1:e>t?-1:0)},n=function(t,e){var n,i,o,r;for(n=1,i=arguments.length;i>n;n++)if(r=arguments[n])for(o in r)r.hasOwnProperty(o)&&(t[o]=r[o]);return t},i=function(t){return(t+"").replace(/^\s+|\s+$|/g,"")},o=function(t){return(t+"").replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")},r=Array.isArray||$&&$.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},s={a:"[aÀÁÂÃÄÅàáâãäåĀāąĄ]",c:"[cÇçćĆčČ]",d:"[dđĐďĎ]",e:"[eÈÉÊËèéêëěĚĒēęĘ]",i:"[iÌÍÎÏìíîïĪī]",l:"[lłŁ]",n:"[nÑñňŇńŃ]",o:"[oÒÓÔÕÕÖØòóôõöøŌō]",r:"[rřŘ]",s:"[sŠšśŚ]",t:"[tťŤ]",u:"[uÙÚÛÜùúûüůŮŪū]",y:"[yŸÿýÝ]",z:"[zŽžżŻźŹ]"},a=function(){var t,e,n,i,o="",r={};for(n in s)if(s.hasOwnProperty(n))for(i=s[n].substring(2,s[n].length-1),o+=i,t=0,e=i.length;e>t;t++)r[i.charAt(t)]=n;var a=new RegExp("["+o+"]","g");return function(t){return t.replace(a,function(t){return r[t]}).toLowerCase()}}();return t}),function(t,e){"function"==typeof define&&define.amd?define("microplugin",e):"object"==typeof exports?module.exports=e():t.MicroPlugin=e()}(this,function(){var t={};t.mixin=function(t){t.plugins={},t.prototype.initializePlugins=function(t){var n,i,o,r=this,s=[];if(r.plugins={names:[],settings:{},requested:{},loaded:{}},e.isArray(t))for(n=0,i=t.length;i>n;n++)"string"==typeof t[n]?s.push(t[n]):(r.plugins.settings[t[n].name]=t[n].options,s.push(t[n].name));else if(t)for(o in t)t.hasOwnProperty(o)&&(r.plugins.settings[o]=t[o],s.push(o));for(;s.length;)r.require(s.shift())},t.prototype.loadPlugin=function(e){var n=this,i=n.plugins,o=t.plugins[e];if(!t.plugins.hasOwnProperty(e))throw new Error('Unable to find "'+e+'" plugin');i.requested[e]=!0,i.loaded[e]=o.fn.apply(n,[n.plugins.settings[e]||{}]),i.names.push(e)},t.prototype.require=function(t){var e=this,n=e.plugins;if(!e.plugins.loaded.hasOwnProperty(t)){if(n.requested[t])throw new Error('Plugin has circular dependency ("'+t+'")');e.loadPlugin(t)}return n.loaded[t]},t.define=function(e,n){t.plugins[e]={name:e,fn:n}}};var e={isArray:Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}};return t}),function(t,e){"function"==typeof define&&define.amd?define("selectize",["jquery","sifter","microplugin"],e):"object"==typeof exports?module.exports=e(require("jquery"),require("sifter"),require("microplugin")):t.Selectize=e(t.jQuery,t.Sifter,t.MicroPlugin)}(this,function(t,e,n){"use strict";var i=function(t,e){if("string"!=typeof e||e.length){var n="string"==typeof e?new RegExp(e,"i"):e,i=function(t){var e=0;if(3===t.nodeType){var o=t.data.search(n);if(o>=0&&t.data.length>0){var r=t.data.match(n),s=document.createElement("span");s.className="highlight";var a=t.splitText(o),l=(a.splitText(r[0].length),a.cloneNode(!0));s.appendChild(l),a.parentNode.replaceChild(s,a),e=1}}else if(1===t.nodeType&&t.childNodes&&!/(script|style)/i.test(t.tagName))for(var u=0;u<t.childNodes.length;++u)u+=i(t.childNodes[u]);return e};return t.each(function(){i(this)})}},o=function(){};o.prototype={on:function(t,e){this._events=this._events||{},this._events[t]=this._events[t]||[],this._events[t].push(e)},off:function(t,e){var n=arguments.length;return 0===n?delete this._events:1===n?delete this._events[t]:(this._events=this._events||{},void(t in this._events!=!1&&this._events[t].splice(this._events[t].indexOf(e),1)))},trigger:function(t){if(this._events=this._events||{},t in this._events!=!1)for(var e=0;e<this._events[t].length;e++)this._events[t][e].apply(this,Array.prototype.slice.call(arguments,1))}},o.mixin=function(t){for(var e=["on","off","trigger"],n=0;n<e.length;n++)t.prototype[e[n]]=o.prototype[e[n]]};var r=/Mac/.test(navigator.userAgent),s=65,a=13,l=27,u=37,c=38,p=80,d=39,h=40,g=78,f=8,v=46,m=16,y=r?91:17,$=r?18:17,w=9,O=1,C=2,b=!/android/i.test(window.navigator.userAgent)&&!!document.createElement("form").validity,I=function(t){return"undefined"!=typeof t},S=function(t){return"undefined"==typeof t||null===t?null:"boolean"==typeof t?t?"1":"0":t+""},k=function(t){return(t+"").replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")},x=function(t){return(t+"").replace(/\$/g,"$$$$")},_={};_.before=function(t,e,n){var i=t[e];t[e]=function(){return n.apply(t,arguments),i.apply(t,arguments)}},_.after=function(t,e,n){var i=t[e];t[e]=function(){var e=i.apply(t,arguments);return n.apply(t,arguments),e}};var P=function(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}},A=function(t,e){var n;return function(){var i=this,o=arguments;window.clearTimeout(n),n=window.setTimeout(function(){t.apply(i,o)},e)}},F=function(t,e,n){var i,o=t.trigger,r={};t.trigger=function(){var n=arguments[0];return-1===e.indexOf(n)?o.apply(t,arguments):void(r[n]=arguments)},n.apply(t,[]),t.trigger=o;for(i in r)r.hasOwnProperty(i)&&o.apply(t,r[i])},D=function(t,e,n,i){t.on(e,n,function(e){for(var n=e.target;n&&n.parentNode!==t[0];)n=n.parentNode;return e.currentTarget=n,i.apply(this,[e])})},z=function(t){var e={};if("selectionStart"in t)e.start=t.selectionStart,e.length=t.selectionEnd-e.start;else if(document.selection){t.focus();var n=document.selection.createRange(),i=document.selection.createRange().text.length;n.moveStart("character",-t.value.length),e.start=n.text.length-i,e.length=i}return e},T=function(t,e,n){var i,o,r={};if(n)for(i=0,o=n.length;o>i;i++)r[n[i]]=t.css(n[i]);else r=t.css();e.css(r)},R=function(e,n){if(!e)return 0;var i=t("<test>").css({position:"absolute",top:-99999,left:-99999,width:"auto",padding:0,whiteSpace:"pre"}).text(e).appendTo("body");T(n,i,["letterSpacing","fontSize","fontFamily","fontWeight","textTransform"]);var o=i.width();return i.remove(),o},j=function(t){var e=null,n=function(n,i){var o,r,s,a,l,u,c,p;n=n||window.event||{},i=i||{},n.metaKey||n.altKey||(i.force||t.data("grow")!==!1)&&(o=t.val(),n.type&&"keydown"===n.type.toLowerCase()&&(r=n.keyCode,s=r>=97&&122>=r||r>=65&&90>=r||r>=48&&57>=r||32===r,r===v||r===f?(p=z(t[0]),p.length?o=o.substring(0,p.start)+o.substring(p.start+p.length):r===f&&p.start?o=o.substring(0,p.start-1)+o.substring(p.start+1):r===v&&"undefined"!=typeof p.start&&(o=o.substring(0,p.start)+o.substring(p.start+1))):s&&(u=n.shiftKey,c=String.fromCharCode(n.keyCode),c=u?c.toUpperCase():c.toLowerCase(),o+=c)),a=t.attr("placeholder"),!o&&a&&(o=a),l=R(o,t)+4,l!==e&&(e=l,t.width(l),t.triggerHandler("resize")))};t.on("keydown keyup update blur",n),n()},M=function(n,i){var o,r,s,a,l=this;a=n[0],a.selectize=l;var u=window.getComputedStyle&&window.getComputedStyle(a,null);if(s=u?u.getPropertyValue("direction"):a.currentStyle&&a.currentStyle.direction,s=s||n.parents("[dir]:first").attr("dir")||"",t.extend(l,{order:0,settings:i,$input:n,tabIndex:n.attr("tabindex")||"",tagType:"select"===a.tagName.toLowerCase()?O:C,rtl:/rtl/i.test(s),eventNS:".selectize"+ ++M.count,highlightedValue:null,isOpen:!1,isDisabled:!1,isRequired:n.is("[required]"),isInvalid:!1,isLocked:!1,isFocused:!1,isInputHidden:!1,isSetup:!1,isShiftDown:!1,isCmdDown:!1,isCtrlDown:!1,ignoreFocus:!1,ignoreBlur:!1,ignoreHover:!1,hasOptions:!1,currentResults:null,lastValue:"",caretPos:0,loading:0,loadedSearches:{},$activeOption:null,$activeItems:[],optgroups:{},options:{},userOptions:{},items:[],renderCache:{},onSearchChange:null===i.loadThrottle?l.onSearchChange:A(l.onSearchChange,i.loadThrottle)}),l.sifter=new e(this.options,{diacritics:i.diacritics}),l.settings.options){for(o=0,r=l.settings.options.length;r>o;o++)l.registerOption(l.settings.options[o]);delete l.settings.options}if(l.settings.optgroups){for(o=0,r=l.settings.optgroups.length;r>o;o++)l.registerOptionGroup(l.settings.optgroups[o]);delete l.settings.optgroups}l.settings.mode=l.settings.mode||(1===l.settings.maxItems?"single":"multi"),"boolean"!=typeof l.settings.hideSelected&&(l.settings.hideSelected="multi"===l.settings.mode),l.initializePlugins(l.settings.plugins),l.setupCallbacks(),l.setupTemplates(),l.setup()};return o.mixin(M),n.mixin(M),t.extend(M.prototype,{setup:function(){var e,n,i,o,s,a,l,u,c,p=this,d=p.settings,h=p.eventNS,g=t(window),f=t(document),v=p.$input;if(l=p.settings.mode,u=v.attr("class")||"",e=t("<div>").addClass(d.wrapperClass).addClass(u).addClass(l),n=t("<div>").addClass(d.inputClass).addClass("items").appendTo(e),i=t('<input type="text" autocomplete="off" />').appendTo(n).attr("tabindex",v.is(":disabled")?"-1":p.tabIndex),a=t(d.dropdownParent||e),o=t("<div>").addClass(d.dropdownClass).addClass(l).hide().appendTo(a),s=t("<div>").addClass(d.dropdownContentClass).appendTo(o),p.settings.copyClassesToDropdown&&o.addClass(u),e.css({width:v[0].style.width}),p.plugins.names.length&&(c="plugin-"+p.plugins.names.join(" plugin-"),e.addClass(c),o.addClass(c)),(null===d.maxItems||d.maxItems>1)&&p.tagType===O&&v.attr("multiple","multiple"),p.settings.placeholder&&i.attr("placeholder",d.placeholder),!p.settings.splitOn&&p.settings.delimiter){var w=p.settings.delimiter.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&");p.settings.splitOn=new RegExp("\\s*"+w+"+\\s*")}v.attr("autocorrect")&&i.attr("autocorrect",v.attr("autocorrect")),v.attr("autocapitalize")&&i.attr("autocapitalize",v.attr("autocapitalize")),p.$wrapper=e,p.$control=n,p.$control_input=i,p.$dropdown=o,p.$dropdown_content=s,o.on("mouseenter","[data-selectable]",function(){return p.onOptionHover.apply(p,arguments)}),o.on("mousedown click","[data-selectable]",function(){return p.onOptionSelect.apply(p,arguments)}),D(n,"mousedown","*:not(input)",function(){return p.onItemSelect.apply(p,arguments)}),j(i),n.on({mousedown:function(){return p.onMouseDown.apply(p,arguments)},click:function(){return p.onClick.apply(p,arguments)}}),i.on({mousedown:function(t){t.stopPropagation()},keydown:function(){return p.onKeyDown.apply(p,arguments)},keyup:function(){return p.onKeyUp.apply(p,arguments)},keypress:function(){return p.onKeyPress.apply(p,arguments)},resize:function(){p.positionDropdown.apply(p,[])},blur:function(){return p.onBlur.apply(p,arguments)},focus:function(){return p.ignoreBlur=!1,p.onFocus.apply(p,arguments)},paste:function(){return p.onPaste.apply(p,arguments)}}),f.on("keydown"+h,function(t){p.isCmdDown=t[r?"metaKey":"ctrlKey"],p.isCtrlDown=t[r?"altKey":"ctrlKey"],p.isShiftDown=t.shiftKey}),f.on("keyup"+h,function(t){t.keyCode===$&&(p.isCtrlDown=!1),t.keyCode===m&&(p.isShiftDown=!1),t.keyCode===y&&(p.isCmdDown=!1)}),f.on("mousedown"+h,function(t){if(p.isFocused){if(t.target===p.$dropdown[0]||t.target.parentNode===p.$dropdown[0])return!1;p.$control.has(t.target).length||t.target===p.$control[0]||p.blur(t.target)}}),g.on(["scroll"+h,"resize"+h].join(" "),function(){p.isOpen&&p.positionDropdown.apply(p,arguments)}),g.on("mousemove"+h,function(){p.ignoreHover=!1}),this.revertSettings={$children:v.children().detach(),tabindex:v.attr("tabindex")},v.attr("tabindex",-1).hide().after(p.$wrapper),t.isArray(d.items)&&(p.setValue(d.items),delete d.items),b&&v.on("invalid"+h,function(t){t.preventDefault(),p.isInvalid=!0,p.refreshState()}),p.updateOriginalInput(),p.refreshItems(),p.refreshState(),p.updatePlaceholder(),p.isSetup=!0,v.is(":disabled")&&p.disable(),p.on("change",this.onChange),v.data("selectize",p),v.addClass("selectized"),p.trigger("initialize"),d.preload===!0&&p.onSearchChange("")},setupTemplates:function(){var e=this,n=e.settings.labelField,i=e.settings.optgroupLabelField,o={optgroup:function(t){return'<div class="optgroup">'+t.html+"</div>"},optgroup_header:function(t,e){return'<div class="optgroup-header">'+e(t[i])+"</div>"},option:function(t,e){return'<div class="option">'+e(t[n])+"</div>"},item:function(t,e){return'<div class="item">'+e(t[n])+"</div>"},option_create:function(t,e){return'<div class="create">Add <strong>'+e(t.input)+"</strong>&hellip;</div>"}};e.settings.render=t.extend({},o,e.settings.render)},setupCallbacks:function(){var t,e,n={initialize:"onInitialize",change:"onChange",item_add:"onItemAdd",item_remove:"onItemRemove",clear:"onClear",option_add:"onOptionAdd",option_remove:"onOptionRemove",option_clear:"onOptionClear",optgroup_add:"onOptionGroupAdd",optgroup_remove:"onOptionGroupRemove",optgroup_clear:"onOptionGroupClear",dropdown_open:"onDropdownOpen",dropdown_close:"onDropdownClose",type:"onType",load:"onLoad",focus:"onFocus",blur:"onBlur"};for(t in n)n.hasOwnProperty(t)&&(e=this.settings[n[t]],e&&this.on(t,e))},onClick:function(t){var e=this;e.isFocused||(e.focus(),t.preventDefault())},onMouseDown:function(e){{var n=this,i=e.isDefaultPrevented();t(e.target)}if(n.isFocused){if(e.target!==n.$control_input[0])return"single"===n.settings.mode?n.isOpen?n.close():n.open():i||n.setActiveItem(null),!1}else i||window.setTimeout(function(){n.focus()},0)},onChange:function(){this.$input.trigger("change")},onPaste:function(e){var n=this;n.isFull()||n.isInputHidden||n.isLocked?e.preventDefault():n.settings.splitOn&&setTimeout(function(){for(var e=t.trim(n.$control_input.val()||"").split(n.settings.splitOn),i=0,o=e.length;o>i;i++)n.createItem(e[i])},0)},onKeyPress:function(t){if(this.isLocked)return t&&t.preventDefault();var e=String.fromCharCode(t.keyCode||t.which);return this.settings.create&&"multi"===this.settings.mode&&e===this.settings.delimiter?(this.createItem(),t.preventDefault(),!1):void 0},onKeyDown:function(t){var e=(t.target===this.$control_input[0],this);if(e.isLocked)return void(t.keyCode!==w&&t.preventDefault());switch(t.keyCode){case s:if(e.isCmdDown)return void e.selectAll();break;case l:return void(e.isOpen&&(t.preventDefault(),t.stopPropagation(),e.close()));case g:if(!t.ctrlKey||t.altKey)break;case h:if(!e.isOpen&&e.hasOptions)e.open();else if(e.$activeOption){e.ignoreHover=!0;var n=e.getAdjacentOption(e.$activeOption,1);n.length&&e.setActiveOption(n,!0,!0)}return void t.preventDefault();case p:if(!t.ctrlKey||t.altKey)break;case c:if(e.$activeOption){e.ignoreHover=!0;var i=e.getAdjacentOption(e.$activeOption,-1);i.length&&e.setActiveOption(i,!0,!0)}return void t.preventDefault();case a:return void(e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),t.preventDefault()));case u:return void e.advanceSelection(-1,t);case d:return void e.advanceSelection(1,t);case w:return e.settings.selectOnTab&&e.isOpen&&e.$activeOption&&(e.onOptionSelect({currentTarget:e.$activeOption}),e.isFull()||t.preventDefault()),void(e.settings.create&&e.createItem()&&t.preventDefault());case f:case v:return void e.deleteSelection(t)}return!e.isFull()&&!e.isInputHidden||(r?t.metaKey:t.ctrlKey)?void 0:void t.preventDefault()},onKeyUp:function(t){var e=this;if(e.isLocked)return t&&t.preventDefault();var n=e.$control_input.val()||"";e.lastValue!==n&&(e.lastValue=n,e.onSearchChange(n),e.refreshOptions(),e.trigger("type",n))},onSearchChange:function(t){var e=this,n=e.settings.load;n&&(e.loadedSearches.hasOwnProperty(t)||(e.loadedSearches[t]=!0,e.load(function(i){n.apply(e,[t,i])})))},onFocus:function(t){var e=this,n=e.isFocused;return e.isDisabled?(e.blur(),t&&t.preventDefault(),!1):void(e.ignoreFocus||(e.isFocused=!0,"focus"===e.settings.preload&&e.onSearchChange(""),n||e.trigger("focus"),e.$activeItems.length||(e.showInput(),e.setActiveItem(null),e.refreshOptions(!!e.settings.openOnFocus)),e.refreshState()))},onBlur:function(t,e){var n=this;if(n.isFocused&&(n.isFocused=!1,!n.ignoreFocus)){if(!n.ignoreBlur&&document.activeElement===n.$dropdown_content[0])return n.ignoreBlur=!0,void n.onFocus(t);var i=function(){n.close(),n.setTextboxValue(""),n.setActiveItem(null),n.setActiveOption(null),n.setCaret(n.items.length),n.refreshState(),(e||document.body).focus(),n.ignoreFocus=!1,n.trigger("blur")};n.ignoreFocus=!0,n.settings.create&&n.settings.createOnBlur?n.createItem(null,!1,i):i()}},onOptionHover:function(t){this.ignoreHover||this.setActiveOption(t.currentTarget,!1)},onOptionSelect:function(e){var n,i,o=this;e.preventDefault&&(e.preventDefault(),e.stopPropagation()),i=t(e.currentTarget),i.hasClass("create")?o.createItem(null,function(){o.settings.closeAfterSelect&&o.close()}):(n=i.attr("data-value"),"undefined"!=typeof n&&(o.lastQuery=null,o.setTextboxValue(""),o.addItem(n),o.settings.closeAfterSelect?o.close():!o.settings.hideSelected&&e.type&&/mouse/.test(e.type)&&o.setActiveOption(o.getOption(n))))},onItemSelect:function(t){var e=this;e.isLocked||"multi"===e.settings.mode&&(t.preventDefault(),e.setActiveItem(t.currentTarget,t))},load:function(t){var e=this,n=e.$wrapper.addClass(e.settings.loadingClass);e.loading++,t.apply(e,[function(t){e.loading=Math.max(e.loading-1,0),t&&t.length&&(e.addOption(t),e.refreshOptions(e.isFocused&&!e.isInputHidden)),e.loading||n.removeClass(e.settings.loadingClass),e.trigger("load",t)}])},setTextboxValue:function(t){var e=this.$control_input,n=e.val()!==t;n&&(e.val(t).triggerHandler("update"),this.lastValue=t)},getValue:function(){return this.tagType===O&&this.$input.attr("multiple")?this.items:this.items.join(this.settings.delimiter)},setValue:function(t,e){var n=e?[]:["change"];F(this,n,function(){this.clear(e),this.addItems(t,e)})},setActiveItem:function(e,n){var i,o,r,s,a,l,u,c,p=this;if("single"!==p.settings.mode){if(e=t(e),!e.length)return t(p.$activeItems).removeClass("active"),p.$activeItems=[],void(p.isFocused&&p.showInput());if(i=n&&n.type.toLowerCase(),"mousedown"===i&&p.isShiftDown&&p.$activeItems.length){for(c=p.$control.children(".active:last"),s=Array.prototype.indexOf.apply(p.$control[0].childNodes,[c[0]]),a=Array.prototype.indexOf.apply(p.$control[0].childNodes,[e[0]]),s>a&&(u=s,s=a,a=u),o=s;a>=o;o++)l=p.$control[0].childNodes[o],-1===p.$activeItems.indexOf(l)&&(t(l).addClass("active"),p.$activeItems.push(l));n.preventDefault()}else"mousedown"===i&&p.isCtrlDown||"keydown"===i&&this.isShiftDown?e.hasClass("active")?(r=p.$activeItems.indexOf(e[0]),p.$activeItems.splice(r,1),e.removeClass("active")):p.$activeItems.push(e.addClass("active")[0]):(t(p.$activeItems).removeClass("active"),p.$activeItems=[e.addClass("active")[0]]);p.hideInput(),this.isFocused||p.focus()}},setActiveOption:function(e,n,i){var o,r,s,a,l,u=this;u.$activeOption&&u.$activeOption.removeClass("active"),u.$activeOption=null,e=t(e),e.length&&(u.$activeOption=e.addClass("active"),(n||!I(n))&&(o=u.$dropdown_content.height(),r=u.$activeOption.outerHeight(!0),n=u.$dropdown_content.scrollTop()||0,s=u.$activeOption.offset().top-u.$dropdown_content.offset().top+n,a=s,l=s-o+r,s+r>o+n?u.$dropdown_content.stop().animate({scrollTop:l},i?u.settings.scrollDuration:0):n>s&&u.$dropdown_content.stop().animate({scrollTop:a},i?u.settings.scrollDuration:0)))},selectAll:function(){var t=this;"single"!==t.settings.mode&&(t.$activeItems=Array.prototype.slice.apply(t.$control.children(":not(input)").addClass("active")),t.$activeItems.length&&(t.hideInput(),t.close()),t.focus())},hideInput:function(){var t=this;t.setTextboxValue(""),t.$control_input.css({opacity:0,position:"absolute",left:t.rtl?1e4:-1e4}),t.isInputHidden=!0},showInput:function(){this.$control_input.css({opacity:1,position:"relative",left:0}),this.isInputHidden=!1},focus:function(){var t=this;t.isDisabled||(t.ignoreFocus=!0,t.$control_input[0].focus(),window.setTimeout(function(){t.ignoreFocus=!1,t.onFocus()},0))},blur:function(t){this.$control_input[0].blur(),this.onBlur(null,t)},getScoreFunction:function(t){return this.sifter.getScoreFunction(t,this.getSearchOptions())},getSearchOptions:function(){var t=this.settings,e=t.sortField;return"string"==typeof e&&(e=[{field:e}]),{fields:t.searchField,conjunction:t.searchConjunction,sort:e}},search:function(e){var n,i,o,r=this,s=r.settings,a=this.getSearchOptions();if(s.score&&(o=r.settings.score.apply(this,[e]),"function"!=typeof o))throw new Error('Selectize "score" setting must be a function that returns a function');if(e!==r.lastQuery?(r.lastQuery=e,i=r.sifter.search(e,t.extend(a,{score:o})),r.currentResults=i):i=t.extend(!0,{},r.currentResults),s.hideSelected)for(n=i.items.length-1;n>=0;n--)-1!==r.items.indexOf(S(i.items[n].id))&&i.items.splice(n,1);return i},refreshOptions:function(e){var n,o,r,s,a,l,u,c,p,d,h,g,f,v,m,y;"undefined"==typeof e&&(e=!0);var $=this,w=t.trim($.$control_input.val()),O=$.search(w),C=$.$dropdown_content,b=$.$activeOption&&S($.$activeOption.attr("data-value"));for(s=O.items.length,"number"==typeof $.settings.maxOptions&&(s=Math.min(s,$.settings.maxOptions)),a={},l=[],n=0;s>n;n++)for(u=$.options[O.items[n].id],c=$.render("option",u),p=u[$.settings.optgroupField]||"",d=t.isArray(p)?p:[p],o=0,r=d&&d.length;r>o;o++)p=d[o],$.optgroups.hasOwnProperty(p)||(p=""),a.hasOwnProperty(p)||(a[p]=[],l.push(p)),a[p].push(c);for(this.settings.lockOptgroupOrder&&l.sort(function(t,e){var n=$.optgroups[t].$order||0,i=$.optgroups[e].$order||0;return n-i}),h=[],n=0,s=l.length;s>n;n++)p=l[n],$.optgroups.hasOwnProperty(p)&&a[p].length?(g=$.render("optgroup_header",$.optgroups[p])||"",g+=a[p].join(""),h.push($.render("optgroup",t.extend({},$.optgroups[p],{html:g})))):h.push(a[p].join(""));if(C.html(h.join("")),$.settings.highlight&&O.query.length&&O.tokens.length)for(n=0,s=O.tokens.length;s>n;n++)i(C,O.tokens[n].regex);if(!$.settings.hideSelected)for(n=0,s=$.items.length;s>n;n++)$.getOption($.items[n]).addClass("selected");f=$.canCreate(w),f&&(C.prepend($.render("option_create",{input:w})),y=t(C[0].childNodes[0])),$.hasOptions=O.items.length>0||f,$.hasOptions?(O.items.length>0?(m=b&&$.getOption(b),m&&m.length?v=m:"single"===$.settings.mode&&$.items.length&&(v=$.getOption($.items[0])),v&&v.length||(v=y&&!$.settings.addPrecedence?$.getAdjacentOption(y,1):C.find("[data-selectable]:first"))):v=y,$.setActiveOption(v),e&&!$.isOpen&&$.open()):($.setActiveOption(null),e&&$.isOpen&&$.close())},addOption:function(e){var n,i,o,r=this;if(t.isArray(e))for(n=0,i=e.length;i>n;n++)r.addOption(e[n]);else(o=r.registerOption(e))&&(r.userOptions[o]=!0,r.lastQuery=null,r.trigger("option_add",o,e))},registerOption:function(t){var e=S(t[this.settings.valueField]);return!e||this.options.hasOwnProperty(e)?!1:(t.$order=t.$order||++this.order,this.options[e]=t,e)},registerOptionGroup:function(t){var e=S(t[this.settings.optgroupValueField]);return e?(t.$order=t.$order||++this.order,this.optgroups[e]=t,e):!1},addOptionGroup:function(t,e){e[this.settings.optgroupValueField]=t,(t=this.registerOptionGroup(e))&&this.trigger("optgroup_add",t,e)},removeOptionGroup:function(t){this.optgroups.hasOwnProperty(t)&&(delete this.optgroups[t],this.renderCache={},this.trigger("optgroup_remove",t))},clearOptionGroups:function(){this.optgroups={},this.renderCache={},this.trigger("optgroup_clear")},updateOption:function(e,n){var i,o,r,s,a,l,u,c=this;if(e=S(e),r=S(n[c.settings.valueField]),null!==e&&c.options.hasOwnProperty(e)){if("string"!=typeof r)throw new Error("Value must be set in option data");u=c.options[e].$order,r!==e&&(delete c.options[e],s=c.items.indexOf(e),-1!==s&&c.items.splice(s,1,r)),n.$order=n.$order||u,c.options[r]=n,a=c.renderCache.item,l=c.renderCache.option,a&&(delete a[e],delete a[r]),l&&(delete l[e],delete l[r]),-1!==c.items.indexOf(r)&&(i=c.getItem(e),o=t(c.render("item",n)),i.hasClass("active")&&o.addClass("active"),i.replaceWith(o)),c.lastQuery=null,c.isOpen&&c.refreshOptions(!1)}},removeOption:function(t,e){var n=this;t=S(t);var i=n.renderCache.item,o=n.renderCache.option;i&&delete i[t],o&&delete o[t],delete n.userOptions[t],delete n.options[t],n.lastQuery=null,n.trigger("option_remove",t),n.removeItem(t,e)},clearOptions:function(){var t=this;t.loadedSearches={},t.userOptions={},t.renderCache={},t.options=t.sifter.items={},t.lastQuery=null,t.trigger("option_clear"),t.clear()},getOption:function(t){return this.getElementWithValue(t,this.$dropdown_content.find("[data-selectable]"))},getAdjacentOption:function(e,n){var i=this.$dropdown.find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},getElementWithValue:function(e,n){if(e=S(e),"undefined"!=typeof e&&null!==e)for(var i=0,o=n.length;o>i;i++)if(n[i].getAttribute("data-value")===e)return t(n[i]);return t()},getItem:function(t){return this.getElementWithValue(t,this.$control.children())},addItems:function(e,n){for(var i=t.isArray(e)?e:[e],o=0,r=i.length;r>o;o++)this.isPending=r-1>o,this.addItem(i[o],n)},addItem:function(e,n){var i=n?[]:["change"];F(this,i,function(){var i,o,r,s,a,l=this,u=l.settings.mode;return e=S(e),-1!==l.items.indexOf(e)?void("single"===u&&l.close()):void(l.options.hasOwnProperty(e)&&("single"===u&&l.clear(n),"multi"===u&&l.isFull()||(i=t(l.render("item",l.options[e])),a=l.isFull(),l.items.splice(l.caretPos,0,e),l.insertAtCaret(i),(!l.isPending||!a&&l.isFull())&&l.refreshState(),l.isSetup&&(r=l.$dropdown_content.find("[data-selectable]"),l.isPending||(o=l.getOption(e),s=l.getAdjacentOption(o,1).attr("data-value"),l.refreshOptions(l.isFocused&&"single"!==u),s&&l.setActiveOption(l.getOption(s))),!r.length||l.isFull()?l.close():l.positionDropdown(),l.updatePlaceholder(),l.trigger("item_add",e,i),l.updateOriginalInput({silent:n})))))})},removeItem:function(t,e){var n,i,o,r=this;n="object"==typeof t?t:r.getItem(t),t=S(n.attr("data-value")),i=r.items.indexOf(t),-1!==i&&(n.remove(),n.hasClass("active")&&(o=r.$activeItems.indexOf(n[0]),r.$activeItems.splice(o,1)),r.items.splice(i,1),r.lastQuery=null,!r.settings.persist&&r.userOptions.hasOwnProperty(t)&&r.removeOption(t,e),i<r.caretPos&&r.setCaret(r.caretPos-1),r.refreshState(),r.updatePlaceholder(),r.updateOriginalInput({silent:e}),r.positionDropdown(),r.trigger("item_remove",t,n))},createItem:function(e,n){var i=this,o=i.caretPos;e=e||t.trim(i.$control_input.val()||"");var r=arguments[arguments.length-1];if("function"!=typeof r&&(r=function(){}),"boolean"!=typeof n&&(n=!0),!i.canCreate(e))return r(),!1;i.lock();var s="function"==typeof i.settings.create?this.settings.create:function(t){var e={};return e[i.settings.labelField]=t,e[i.settings.valueField]=t,e},a=P(function(t){if(i.unlock(),!t||"object"!=typeof t)return r();var e=S(t[i.settings.valueField]);return"string"!=typeof e?r():(i.setTextboxValue(""),i.addOption(t),i.setCaret(o),i.addItem(e),i.refreshOptions(n&&"single"!==i.settings.mode),void r(t))}),l=s.apply(this,[e,a]);return"undefined"!=typeof l&&a(l),!0},refreshItems:function(){this.lastQuery=null,this.isSetup&&this.addItem(this.items),this.refreshState(),this.updateOriginalInput()},refreshState:function(){var t,e=this;e.isRequired&&(e.items.length&&(e.isInvalid=!1),e.$control_input.prop("required",t)),e.refreshClasses()},refreshClasses:function(){var e=this,n=e.isFull(),i=e.isLocked;e.$wrapper.toggleClass("rtl",e.rtl),e.$control.toggleClass("focus",e.isFocused).toggleClass("disabled",e.isDisabled).toggleClass("required",e.isRequired).toggleClass("invalid",e.isInvalid).toggleClass("locked",i).toggleClass("full",n).toggleClass("not-full",!n).toggleClass("input-active",e.isFocused&&!e.isInputHidden).toggleClass("dropdown-active",e.isOpen).toggleClass("has-options",!t.isEmptyObject(e.options)).toggleClass("has-items",e.items.length>0),
e.$control_input.data("grow",!n&&!i)},isFull:function(){return null!==this.settings.maxItems&&this.items.length>=this.settings.maxItems},updateOriginalInput:function(t){var e,n,i,o,r=this;if(t=t||{},r.tagType===O){for(i=[],e=0,n=r.items.length;n>e;e++)o=r.options[r.items[e]][r.settings.labelField]||"",i.push('<option value="'+k(r.items[e])+'" selected="selected">'+k(o)+"</option>");i.length||this.$input.attr("multiple")||i.push('<option value="" selected="selected"></option>'),r.$input.html(i.join(""))}else r.$input.val(r.getValue()),r.$input.attr("value",r.$input.val());r.isSetup&&(t.silent||r.trigger("change",r.$input.val()))},updatePlaceholder:function(){if(this.settings.placeholder){var t=this.$control_input;this.items.length?t.removeAttr("placeholder"):t.attr("placeholder",this.settings.placeholder),t.triggerHandler("update",{force:!0})}},open:function(){var t=this;t.isLocked||t.isOpen||"multi"===t.settings.mode&&t.isFull()||(t.focus(),t.isOpen=!0,t.refreshState(),t.$dropdown.css({visibility:"hidden",display:"block"}),t.positionDropdown(),t.$dropdown.css({visibility:"visible"}),t.trigger("dropdown_open",t.$dropdown))},close:function(){var t=this,e=t.isOpen;"single"===t.settings.mode&&t.items.length&&t.hideInput(),t.isOpen=!1,t.$dropdown.hide(),t.setActiveOption(null),t.refreshState(),e&&t.trigger("dropdown_close",t.$dropdown)},positionDropdown:function(){var t=this.$control,e="body"===this.settings.dropdownParent?t.offset():t.position();e.top+=t.outerHeight(!0),this.$dropdown.css({width:t.outerWidth(),top:e.top,left:e.left})},clear:function(t){var e=this;e.items.length&&(e.$control.children(":not(input)").remove(),e.items=[],e.lastQuery=null,e.setCaret(0),e.setActiveItem(null),e.updatePlaceholder(),e.updateOriginalInput({silent:t}),e.refreshState(),e.showInput(),e.trigger("clear"))},insertAtCaret:function(e){var n=Math.min(this.caretPos,this.items.length);0===n?this.$control.prepend(e):t(this.$control[0].childNodes[n]).before(e),this.setCaret(n+1)},deleteSelection:function(e){var n,i,o,r,s,a,l,u,c,p=this;if(o=e&&e.keyCode===f?-1:1,r=z(p.$control_input[0]),p.$activeOption&&!p.settings.hideSelected&&(l=p.getAdjacentOption(p.$activeOption,-1).attr("data-value")),s=[],p.$activeItems.length){for(c=p.$control.children(".active:"+(o>0?"last":"first")),a=p.$control.children(":not(input)").index(c),o>0&&a++,n=0,i=p.$activeItems.length;i>n;n++)s.push(t(p.$activeItems[n]).attr("data-value"));e&&(e.preventDefault(),e.stopPropagation())}else(p.isFocused||"single"===p.settings.mode)&&p.items.length&&(0>o&&0===r.start&&0===r.length?s.push(p.items[p.caretPos-1]):o>0&&r.start===p.$control_input.val().length&&s.push(p.items[p.caretPos]));if(!s.length||"function"==typeof p.settings.onDelete&&p.settings.onDelete.apply(p,[s])===!1)return!1;for("undefined"!=typeof a&&p.setCaret(a);s.length;)p.removeItem(s.pop());return p.showInput(),p.positionDropdown(),p.refreshOptions(!0),l&&(u=p.getOption(l),u.length&&p.setActiveOption(u)),!0},advanceSelection:function(t,e){var n,i,o,r,s,a,l=this;0!==t&&(l.rtl&&(t*=-1),n=t>0?"last":"first",i=z(l.$control_input[0]),l.isFocused&&!l.isInputHidden?(r=l.$control_input.val().length,s=0>t?0===i.start&&0===i.length:i.start===r,s&&!r&&l.advanceCaret(t,e)):(a=l.$control.children(".active:"+n),a.length&&(o=l.$control.children(":not(input)").index(a),l.setActiveItem(null),l.setCaret(t>0?o+1:o))))},advanceCaret:function(t,e){var n,i,o=this;0!==t&&(n=t>0?"next":"prev",o.isShiftDown?(i=o.$control_input[n](),i.length&&(o.hideInput(),o.setActiveItem(i),e&&e.preventDefault())):o.setCaret(o.caretPos+t))},setCaret:function(e){var n=this;if(e="single"===n.settings.mode?n.items.length:Math.max(0,Math.min(n.items.length,e)),!n.isPending){var i,o,r,s;for(r=n.$control.children(":not(input)"),i=0,o=r.length;o>i;i++)s=t(r[i]).detach(),e>i?n.$control_input.before(s):n.$control.append(s)}n.caretPos=e},lock:function(){this.close(),this.isLocked=!0,this.refreshState()},unlock:function(){this.isLocked=!1,this.refreshState()},disable:function(){var t=this;t.$input.prop("disabled",!0),t.$control_input.prop("disabled",!0).prop("tabindex",-1),t.isDisabled=!0,t.lock()},enable:function(){var t=this;t.$input.prop("disabled",!1),t.$control_input.prop("disabled",!1).prop("tabindex",t.tabIndex),t.isDisabled=!1,t.unlock()},destroy:function(){var e=this,n=e.eventNS,i=e.revertSettings;e.trigger("destroy"),e.off(),e.$wrapper.remove(),e.$dropdown.remove(),e.$input.html("").append(i.$children).removeAttr("tabindex").removeClass("selectized").attr({tabindex:i.tabindex}).show(),e.$control_input.removeData("grow"),e.$input.removeData("selectize"),t(window).off(n),t(document).off(n),t(document.body).off(n),delete e.$input[0].selectize},render:function(t,e){var n,i,o="",r=!1,s=this,a=/^[\t \r\n]*<([a-z][a-z0-9\-_]*(?:\:[a-z][a-z0-9\-_]*)?)/i;return("option"===t||"item"===t)&&(n=S(e[s.settings.valueField]),r=!!n),r&&(I(s.renderCache[t])||(s.renderCache[t]={}),s.renderCache[t].hasOwnProperty(n))?s.renderCache[t][n]:(o=s.settings.render[t].apply(this,[e,k]),("option"===t||"option_create"===t)&&(o=o.replace(a,"<$1 data-selectable")),"optgroup"===t&&(i=e[s.settings.optgroupValueField]||"",o=o.replace(a,'<$1 data-group="'+x(k(i))+'"')),("option"===t||"item"===t)&&(o=o.replace(a,'<$1 data-value="'+x(k(n||""))+'"')),r&&(s.renderCache[t][n]=o),o)},clearCache:function(t){var e=this;"undefined"==typeof t?e.renderCache={}:delete e.renderCache[t]},canCreate:function(t){var e=this;if(!e.settings.create)return!1;var n=e.settings.createFilter;return!(!t.length||"function"==typeof n&&!n.apply(e,[t])||"string"==typeof n&&!new RegExp(n).test(t)||n instanceof RegExp&&!n.test(t))}}),M.count=0,M.defaults={options:[],optgroups:[],plugins:[],delimiter:",",splitOn:null,persist:!0,diacritics:!0,create:!1,createOnBlur:!1,createFilter:null,highlight:!0,openOnFocus:!0,maxOptions:1e3,maxItems:null,hideSelected:null,addPrecedence:!1,selectOnTab:!1,preload:!1,allowEmptyOption:!1,closeAfterSelect:!1,scrollDuration:60,loadThrottle:300,loadingClass:"loading",dataAttr:"data-data",optgroupField:"optgroup",valueField:"value",labelField:"text",optgroupLabelField:"label",optgroupValueField:"value",lockOptgroupOrder:!1,sortField:"$order",searchField:["text"],searchConjunction:"and",mode:null,wrapperClass:"selectize-control",inputClass:"selectize-input",dropdownClass:"selectize-dropdown",dropdownContentClass:"selectize-dropdown-content",dropdownParent:null,copyClassesToDropdown:!0,render:{}},t.fn.selectize=function(e){var n=t.fn.selectize.defaults,i=t.extend({},n,e),o=i.dataAttr,r=i.labelField,s=i.valueField,a=i.optgroupField,l=i.optgroupLabelField,u=i.optgroupValueField,c=function(e,n){var a,l,u,c,p=e.attr(o);if(p)for(n.options=JSON.parse(p),a=0,l=n.options.length;l>a;a++)n.items.push(n.options[a][s]);else{var d=t.trim(e.val()||"");if(!i.allowEmptyOption&&!d.length)return;for(u=d.split(i.delimiter),a=0,l=u.length;l>a;a++)c={},c[r]=u[a],c[s]=u[a],n.options.push(c);n.items=u}},p=function(e,n){var c,p,d,h,g=n.options,f={},v=function(t){var e=o&&t.attr(o);return"string"==typeof e&&e.length?JSON.parse(e):null},m=function(e,o){e=t(e);var l=S(e.attr("value"));if(l||i.allowEmptyOption)if(f.hasOwnProperty(l)){if(o){var u=f[l][a];u?t.isArray(u)?u.push(o):f[l][a]=[u,o]:f[l][a]=o}}else{var c=v(e)||{};c[r]=c[r]||e.text(),c[s]=c[s]||l,c[a]=c[a]||o,f[l]=c,g.push(c),e.is(":selected")&&n.items.push(l)}},y=function(e){var i,o,r,s,a;for(e=t(e),r=e.attr("label"),r&&(s=v(e)||{},s[l]=r,s[u]=r,n.optgroups.push(s)),a=t("option",e),i=0,o=a.length;o>i;i++)m(a[i],r)};for(n.maxItems=e.attr("multiple")?null:1,h=e.children(),c=0,p=h.length;p>c;c++)d=h[c].tagName.toLowerCase(),"optgroup"===d?y(h[c]):"option"===d&&m(h[c])};return this.each(function(){if(!this.selectize){var o,r=t(this),s=this.tagName.toLowerCase(),a=r.attr("placeholder")||r.attr("data-placeholder");a||i.allowEmptyOption||(a=r.children('option[value=""]').text());var l={placeholder:a,options:[],optgroups:[],items:[]};"select"===s?p(r,l):c(r,l),o=new M(r,t.extend(!0,{},n,l,e))}})},t.fn.selectize.defaults=M.defaults,t.fn.selectize.support={validity:b},M.define("drag_drop",function(e){if(!t.fn.sortable)throw new Error('The "drag_drop" plugin requires jQuery UI "sortable".');if("multi"===this.settings.mode){var n=this;n.lock=function(){var t=n.lock;return function(){var e=n.$control.data("sortable");return e&&e.disable(),t.apply(n,arguments)}}(),n.unlock=function(){var t=n.unlock;return function(){var e=n.$control.data("sortable");return e&&e.enable(),t.apply(n,arguments)}}(),n.setup=function(){var e=n.setup;return function(){e.apply(this,arguments);var i=n.$control.sortable({items:"[data-value]",forcePlaceholderSize:!0,disabled:n.isLocked,start:function(t,e){e.placeholder.css("width",e.helper.css("width")),i.css({overflow:"visible"})},stop:function(){i.css({overflow:"hidden"});var e=n.$activeItems?n.$activeItems.slice():null,o=[];i.children("[data-value]").each(function(){o.push(t(this).attr("data-value"))}),n.setValue(o),n.setActiveItem(e)}})}}()}}),M.define("dropdown_header",function(e){var n=this;e=t.extend({title:"Untitled",headerClass:"selectize-dropdown-header",titleRowClass:"selectize-dropdown-header-title",labelClass:"selectize-dropdown-header-label",closeClass:"selectize-dropdown-header-close",html:function(t){return'<div class="'+t.headerClass+'"><div class="'+t.titleRowClass+'"><span class="'+t.labelClass+'">'+t.title+'</span><a href="javascript:void(0)" class="'+t.closeClass+'">&times;</a></div></div>'}},e),n.setup=function(){var i=n.setup;return function(){i.apply(n,arguments),n.$dropdown_header=t(e.html(e)),n.$dropdown.prepend(n.$dropdown_header)}}()}),M.define("optgroup_columns",function(e){var n=this;e=t.extend({equalizeWidth:!0,equalizeHeight:!0},e),this.getAdjacentOption=function(e,n){var i=e.closest("[data-group]").find("[data-selectable]"),o=i.index(e)+n;return o>=0&&o<i.length?i.eq(o):t()},this.onKeyDown=function(){var t=n.onKeyDown;return function(e){var i,o,r,s;return!this.isOpen||e.keyCode!==u&&e.keyCode!==d?t.apply(this,arguments):(n.ignoreHover=!0,s=this.$activeOption.closest("[data-group]"),i=s.find("[data-selectable]").index(this.$activeOption),s=e.keyCode===u?s.prev("[data-group]"):s.next("[data-group]"),r=s.find("[data-selectable]"),o=r.eq(Math.min(r.length-1,i)),void(o.length&&this.setActiveOption(o)))}}();var i=function(){var t,e=i.width,n=document;return"undefined"==typeof e&&(t=n.createElement("div"),t.innerHTML='<div style="width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;"><div style="width:1px;height:100px;"></div></div>',t=t.firstChild,n.body.appendChild(t),e=i.width=t.offsetWidth-t.clientWidth,n.body.removeChild(t)),e},o=function(){var o,r,s,a,l,u,c;if(c=t("[data-group]",n.$dropdown_content),r=c.length,r&&n.$dropdown_content.width()){if(e.equalizeHeight){for(s=0,o=0;r>o;o++)s=Math.max(s,c.eq(o).height());c.css({height:s})}e.equalizeWidth&&(u=n.$dropdown_content.innerWidth()-i(),a=Math.round(u/r),c.css({width:a}),r>1&&(l=u-a*(r-1),c.eq(r-1).css({width:l})))}};(e.equalizeHeight||e.equalizeWidth)&&(_.after(this,"positionDropdown",o),_.after(this,"refreshOptions",o))}),M.define("remove_button",function(e){if("single"!==this.settings.mode){e=t.extend({label:"&times;",title:"Remove",className:"remove",append:!0},e);var n=this,i='<a href="javascript:void(0)" class="'+e.className+'" tabindex="-1" title="'+k(e.title)+'">'+e.label+"</a>",o=function(t,e){var n=t.search(/(<\/[^>]+>\s*)$/);return t.substring(0,n)+e+t.substring(n)};this.setup=function(){var r=n.setup;return function(){if(e.append){var s=n.settings.render.item;n.settings.render.item=function(t){return o(s.apply(this,arguments),i)}}r.apply(this,arguments),this.$control.on("click","."+e.className,function(e){if(e.preventDefault(),!n.isLocked){var i=t(e.currentTarget).parent();n.setActiveItem(i),n.deleteSelection()&&n.setCaret(n.items.length)}})}}()}}),M.define("restore_on_backspace",function(t){var e=this;t.text=t.text||function(t){return t[this.settings.labelField]},this.onKeyDown=function(){var n=e.onKeyDown;return function(e){var i,o;return e.keyCode===f&&""===this.$control_input.val()&&!this.$activeItems.length&&(i=this.caretPos-1,i>=0&&i<this.items.length)?(o=this.options[this.items[i]],this.deleteSelection(e)&&(this.setTextboxValue(t.text.apply(this,[o])),this.refreshOptions(!0)),void e.preventDefault()):n.apply(this,arguments)}}()}),M}),window.log=function(t){console.log(t)},$(function(){$(".nota .pseudo-link").on("click",function(t){t.preventDefault(),$elem=$(this),href=$elem.data("href"),$(href).clone().appendTo("#nota-popup"),$("#nota-popup").fadeIn(600,function(){$("#nota-popup .nota-item").fadeIn(400)}),$("#nota-popup .close").on("click",function(t){$("#nota-popup").hide().andSelf().html("")})})}),$(function(){$(".custom-select").selectize()});var markers=[],routing=!1,contactMap,multiRoute=!1;$(function(){$(".point-detail .close").click(function(){var t=$(this).parent(),e=parseInt(t.attr("data-point"));return closePointDetails(e),$(".points").show(),!1}),$(".route .close").on("click",function(){return $(".points").show(),closeRoute(),!1}),$(".contact-map .points a").on("mouseenter",function(){var t=parseInt($(this).attr("data-point"));hoverMarker(t)}),$(".contact-map .points a").on("mouseleave",function(){var t=parseInt($(this).attr("data-point"));blurMarker(t)}),$(".contact-map .points a").on("click",function(){parseInt($(this).attr("data-point"));return $(this).next().slideToggle("down"),!1}),$("#contact-map")&&$("#contact-map").length&&ymaps.ready(function(){contactMap=new ymaps.Map("contact-map",{center:[center_latitude,center_longitude],zoom:11,controls:[],behaviors:["drag"]}),contactMap.events.add("click",function(t){var e=t.get("coords");routing&&ymaps.geocode(e,{kind:"house",results:1}).then(function(t){var n=t.geoObjects.get(0),i=n.properties.get("name");$("#pointA").val().length?$("#pointB").val().length||setRoutePoint(e,i,2):setRoutePoint(e,i,1)})});for(var t in contactPoints){var e=contactPoints[t],n=new ymaps.Placemark(e,{},{iconLayout:"default#imageWithContent",iconImageHref:"/content/images/spacer.png",iconImageSize:[44,44],iconImageOffset:[-22,-22],iconContentSize:[44,44],pointNum:t,iconContentLayout:ymaps.templateLayoutFactory.createClass('<span class="marker">'+t+"</span>")});n.events.add("mouseenter",function(t){var e=t.get("target").options.get("pointNum");hoverMarker(e)}).add("mouseleave",function(t){var e=t.get("target").options.get("pointNum");blurMarker(e)}).add("click",function(t){var e=t.get("target").options.get("pointNum");openPointDetails(e)}),contactMap.geoObjects.add(n),markers[t]={placemark:n,active:!1}}$("#zoom-in").click(function(){var t=contactMap.getZoom();return t>=17?!1:void contactMap.setZoom(t+1,{duration:200})}),$("#zoom-out").click(function(){var t=contactMap.getZoom();return 1>=t?!1:void contactMap.setZoom(t-1,{duration:200})})}),$("#points-change").on("click",function(){var t=$("#pointA").val(),e=$("#pointA-coord").val();return $("#pointA").val($("#pointB").val()),$("#pointA-coord").val($("#pointB-coord").val()),$("#pointB").val(t),$("#pointB-coord").val(e),setRoute(),!1}),$(".route .btn").click(function(){return setRoute(),!1}),$("#routingMode").on("change",function(){setRoute()}),$("#avoidTraffic").on("change",function(){setRoute()}),$("#pointA").on("change",function(){$("#pointA-coord").val("")}),$("#pointB").on("change",function(){$("#pointB-coord").val("")})});
//# sourceMappingURL=data:application/json;base64,